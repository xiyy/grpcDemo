// Code generated by protoc-gen-go. DO NOT EDIT.
// source: counter.proto

//protoc --go_out=plugins=grpc:. counter.proto

package counter

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CountReq struct {
	Start                int64    `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountReq) Reset()         { *m = CountReq{} }
func (m *CountReq) String() string { return proto.CompactTextString(m) }
func (*CountReq) ProtoMessage()    {}
func (*CountReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_75dcd656fce7132f, []int{0}
}

func (m *CountReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountReq.Unmarshal(m, b)
}
func (m *CountReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountReq.Marshal(b, m, deterministic)
}
func (m *CountReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountReq.Merge(m, src)
}
func (m *CountReq) XXX_Size() int {
	return xxx_messageInfo_CountReq.Size(m)
}
func (m *CountReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CountReq.DiscardUnknown(m)
}

var xxx_messageInfo_CountReq proto.InternalMessageInfo

func (m *CountReq) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

type CountRes struct {
	Num                  int64    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountRes) Reset()         { *m = CountRes{} }
func (m *CountRes) String() string { return proto.CompactTextString(m) }
func (*CountRes) ProtoMessage()    {}
func (*CountRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_75dcd656fce7132f, []int{1}
}

func (m *CountRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountRes.Unmarshal(m, b)
}
func (m *CountRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountRes.Marshal(b, m, deterministic)
}
func (m *CountRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountRes.Merge(m, src)
}
func (m *CountRes) XXX_Size() int {
	return xxx_messageInfo_CountRes.Size(m)
}
func (m *CountRes) XXX_DiscardUnknown() {
	xxx_messageInfo_CountRes.DiscardUnknown(m)
}

var xxx_messageInfo_CountRes proto.InternalMessageInfo

func (m *CountRes) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func init() {
	proto.RegisterType((*CountReq)(nil), "counter.CountReq")
	proto.RegisterType((*CountRes)(nil), "counter.CountRes")
}

func init() { proto.RegisterFile("counter.proto", fileDescriptor_75dcd656fce7132f) }

var fileDescriptor_75dcd656fce7132f = []byte{
	// 118 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xce, 0x2f, 0xcd,
	0x2b, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x14, 0xb8,
	0x38, 0x9c, 0x41, 0xcc, 0xa0, 0xd4, 0x42, 0x21, 0x11, 0x2e, 0xd6, 0xe2, 0x92, 0xc4, 0xa2, 0x12,
	0x09, 0x46, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0x08, 0x47, 0x49, 0x06, 0xae, 0xa2, 0x58, 0x48, 0x80,
	0x8b, 0x39, 0xaf, 0x34, 0x17, 0x2a, 0x0f, 0x62, 0x1a, 0x59, 0x71, 0xb1, 0x3b, 0x43, 0x8c, 0x12,
	0xd2, 0xe7, 0x62, 0x05, 0x9b, 0x2a, 0x24, 0xa8, 0x07, 0xb3, 0x0c, 0x66, 0xb4, 0x14, 0x86, 0x50,
	0xb1, 0x01, 0x63, 0x12, 0x1b, 0xd8, 0x2d, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xed, 0xd8,
	0x50, 0xf0, 0x9c, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CounterClient is the client API for Counter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CounterClient interface {
	Count(ctx context.Context, in *CountReq, opts ...grpc.CallOption) (Counter_CountClient, error)
}

type counterClient struct {
	cc *grpc.ClientConn
}

func NewCounterClient(cc *grpc.ClientConn) CounterClient {
	return &counterClient{cc}
}

func (c *counterClient) Count(ctx context.Context, in *CountReq, opts ...grpc.CallOption) (Counter_CountClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Counter_serviceDesc.Streams[0], "/counter.Counter/count", opts...)
	if err != nil {
		return nil, err
	}
	x := &counterCountClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Counter_CountClient interface {
	Recv() (*CountRes, error)
	grpc.ClientStream
}

type counterCountClient struct {
	grpc.ClientStream
}

func (x *counterCountClient) Recv() (*CountRes, error) {
	m := new(CountRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CounterServer is the server API for Counter service.
type CounterServer interface {
	Count(*CountReq, Counter_CountServer) error
}

// UnimplementedCounterServer can be embedded to have forward compatible implementations.
type UnimplementedCounterServer struct {
}

func (*UnimplementedCounterServer) Count(req *CountReq, srv Counter_CountServer) error {
	return status.Errorf(codes.Unimplemented, "method Count not implemented")
}

func RegisterCounterServer(s *grpc.Server, srv CounterServer) {
	s.RegisterService(&_Counter_serviceDesc, srv)
}

func _Counter_Count_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CountReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CounterServer).Count(m, &counterCountServer{stream})
}

type Counter_CountServer interface {
	Send(*CountRes) error
	grpc.ServerStream
}

type counterCountServer struct {
	grpc.ServerStream
}

func (x *counterCountServer) Send(m *CountRes) error {
	return x.ServerStream.SendMsg(m)
}

var _Counter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "counter.Counter",
	HandlerType: (*CounterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "count",
			Handler:       _Counter_Count_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "counter.proto",
}
